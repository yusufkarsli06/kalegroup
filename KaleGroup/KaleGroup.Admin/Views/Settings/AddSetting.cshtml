 @model KaleGroup.Admin.Models.AddSettingsViewModel
 @{
    ViewData["Title"] = "Menu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="container mt-5 mb-5">
    <div class="heading mb-3">
        <h1 class="text-center">Sistem Ayarı Ekle</h1>
    </div>
    <form asp-controller="Settings" asp-action="AddSetting" asp-validator="true">
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-lg-6">
                <div class="form-group position-relative">
                    <label>Key <span class="text-danger">*</span></label>
                    <i data-feather="user" class="fea icon-sm icons"></i>
                    <input type="text" class="form-control pl-5"  asp-for="SettingsKey">
                    <span asp-validation-for="SettingsKey" class="text-danger mt-2"></span>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="form-group position-relative">
                    <label>Value <span class="text-danger">*</span></label>
                    <i data-feather="user" class="fea icon-sm icons"></i>
                    <input type="text" class="form-control pl-5" asp-for="SettingsValue">
                    <span asp-validation-for="SettingsValue" class="text-danger mt-2"></span>
                </div>
            </div>


            <div class="col-12">
                <div class="form-group position-relative">
                    <label>Aktif mi?</label>
                    <div class="">
                        <input type="radio" value="true" asp-for="IsActive" /> Evet
                        <input type="radio" value="false" asp-for="IsActive" /> Hayır<br />
                        <span asp-validation-for="IsActive" class="text-danger mt-2"></span>
                    </div>
                </div>
            </div>

            <div class="col-lg-12 mb-0">
                <input type="submit" class="btn btn-primary btn-block" value="Kaydet">
            </div>
        </div>
    </form>
</div>



<script>
    // XSS tehlikesi yaratabilecek karakterleri kontrol etme
    // XSS tehlikesi yaratabilecek karakterleri kontrol etme
    function checkForXSS(value) {
        // Tehlikeli kabul edilen karakterler veya komutlar
        const xssPatterns = [
            /<script.*?>.*?<\/script>/gi,  // Script tagları
            /on\w+=".*?"/gi,  // onClick, onError gibi olay işlemleri
            /<.*?>/gi,  // HTML tagları
            /javascript:/gi,  // javascript: protokolü
            /document\.cookie/gi,  // document.cookie erişimi
            /eval\(.+\)/gi,  // eval fonksiyonu
            /<iframe.*?>.*?<\/iframe>/gi  // iframe tagları
        ];

        // Tüm XSS desenlerini kontrol et
        return xssPatterns.some(pattern => pattern.test(value));
    }

    // Label'ı almak için fonksiyon
    function getLabelText(input) {
        // input'un en yakın parent div'ini bul ve içindeki label'ı seç
        let label = input.closest('.form-group').querySelector('label');
        return label ? label.innerText.trim() : input.name;  // Label varsa onun içeriğini döndür, yoksa input name'ini döndür
    }

    // Form submit event'i dinleyerek inputları kontrol et
    document.querySelector('form').addEventListener('submit', function (event) {
        let inputs = document.querySelectorAll('input.form-control.pl-5');
        let hasXSS = false;

        // Her input değerini kontrol et
        inputs.forEach(input => {
            const value = input.value;

            if (checkForXSS(value)) {
                hasXSS = true;
                // Uyarı mesajında label içeriğini göster
                let labelText = getLabelText(input);
                alert(`Uyarı: "${labelText}" alanında zararlı kod var.`);
            }
        });

        // Eğer XSS tespit edilirse form gönderimini engelle
        if (hasXSS) {
            event.preventDefault();  // Formun gönderilmesini durdur
        }
    });



</script>